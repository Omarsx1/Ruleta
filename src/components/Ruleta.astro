---
// Ruleta component with Fortnite theme
---

<div class="flex flex-col lg:flex-row justify-center items-center gap-4 md:gap-6 lg:gap-8 xl:gap-12 2xl:gap-16 3xl:gap-20 min-h-screen px-4 md:px-6 lg:px-6 xl:px-8 2xl:px-12 3xl:px-16 py-4 lg:py-6 2xl:py-8 3xl:py-12">
  <!-- Wheel Container - Always first on mobile -->
  <div class="flex flex-col items-center gap-4 md:gap-6 lg:gap-8 3xl:gap-12 relative order-1 lg:order-2 justify-center min-h-0 mt-8 md:mt-10 lg:mt-0 3xl:mt-0">
    <!-- Pointer pointing inward -->
    <div class="absolute top-0 left-1/2 transform -translate-x-1/2 translate-y-2 sm:translate-y-4 md:translate-y-6 lg:-translate-y-2 z-20">
      <div class="w-0 h-0 border-l-[20px] lg:border-l-[28px] xl:border-l-[30px] 2xl:border-l-[35px] 3xl:border-l-[45px] border-r-[20px] lg:border-r-[28px] xl:border-r-[30px] 2xl:border-r-[35px] 3xl:border-r-[45px] border-t-[30px] lg:border-t-[42px] xl:border-t-[45px] 2xl:border-t-[55px] 3xl:border-t-[70px] border-l-transparent border-r-transparent border-t-fortnite-yellow filter drop-shadow-[0_4px_8px_rgba(255,215,0,0.5)]"></div>
    </div>
    
    <!-- Wheel without Glass Effect (removed) -->
    <div id="wheel" class="relative w-[280px] h-[280px] sm:w-[350px] sm:h-[350px] md:w-[400px] md:h-[400px] lg:w-[320px] lg:h-[320px] xl:w-[350px] xl:h-[350px] 2xl:w-[800px] 2xl:h-[800px] 3xl:w-[900px] 3xl:h-[900px] rounded-full border border-white/20 overflow-hidden mb-2 md:mb-3 lg:mb-3 xl:mb-4 2xl:mb-10 3xl:mb-12">
      <!-- Dynamic Segments -->
      <div id="segments"></div>
      
      <!-- Center Circle -->
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 md:w-20 md:h-20 lg:w-14 lg:h-14 xl:w-16 xl:h-16 2xl:w-32 2xl:h-32 3xl:w-36 3xl:h-36 bg-white/90 rounded-full border border-white/30 flex items-center justify-center z-10 backdrop-blur-[15px] shadow-[0_4px_16px_0_rgba(31,38,135,0.3)]">
        <img src="/F.svg" alt="F" class="w-4 h-4 sm:w-6 sm:h-6 md:w-8 md:h-8 lg:w-5 lg:h-5 xl:w-6 xl:h-6 2xl:w-14 2xl:h-14 3xl:w-18 3xl:h-18" style="filter: invert(60%) sepia(75%) saturate(1000%) hue-rotate(165deg) brightness(100%) contrast(95%);" />
      </div>
    </div>
    
    <!-- Spin Button -->
    <button 
      id="spinButton" 
      class="backdrop-blur-[25px] bg-white/10 hover:bg-white/20 px-4 py-2 sm:px-6 sm:py-3 md:px-8 md:py-3 lg:px-4 lg:py-2 xl:px-6 xl:py-3 2xl:px-12 2xl:py-5 3xl:px-16 3xl:py-7 rounded-2xl text-white font-semibold text-sm sm:text-base md:text-lg lg:text-sm xl:text-base 2xl:text-2xl 3xl:text-4xl border border-white/20 shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] transform hover:scale-105 transition-all duration-300 active:scale-95 w-full max-w-xs md:max-w-sm lg:max-w-none lg:w-auto mb-0 flex items-center justify-center gap-2"
    >
      ¬°GIRAR RULETA! 
    </button>
    
    <!-- Result Popup Modal (hidden by default) -->
    <div id="resultModal" class="fixed inset-0 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-all duration-500">
      <!-- Backdrop with blur -->
      <div class="absolute inset-0 bg-black/50 backdrop-blur-md"></div>
      
      <div class="bg-gradient-to-br from-blue-900/40 to-purple-900/40 backdrop-blur-[15px] border border-white/20 rounded-2xl lg:rounded-2xl xl:rounded-3xl 3xl:rounded-3xl p-4 lg:p-4 xl:p-6 2xl:p-6 3xl:p-8 shadow-2xl w-full max-w-xs lg:max-w-xs xl:max-w-sm 3xl:max-w-md">
        <div class="text-center">
          <div class="text-8xl 3xl:text-9xl mb-8 3xl:mb-12">üéâ</div>
          <h2 class="text-white/90 text-4xl 3xl:text-5xl font-semibold mb-6 3xl:mb-8">¬°GANADOR!</h2>
          <div id="resultText" class="text-fortnite-yellow font-black text-6xl 3xl:text-7xl mb-10 3xl:mb-14 tracking-wide"></div>
          <button id="closeModal" class="bg-gradient-to-r from-fortnite-blue to-fortnite-purple hover:from-fortnite-purple hover:to-fortnite-blue text-white font-bold px-4 py-2 lg:px-12 lg:py-5 3xl:px-16 3xl:py-7 rounded-2xl shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95 border-2 border-white/30 text-base lg:text-2xl 3xl:text-3xl w-full max-w-xs lg:max-w-md 3xl:max-w-lg whitespace-nowrap">
            ¬°CONTINUAR! 
          </button>
        </div>
      </div>
    </div>
    
  </div>

  <!-- Left Panel - Spin Control - Now below wheel on mobile -->
  <div class="backdrop-blur-[25px] bg-white/5 p-3 md:p-4 lg:p-1 xl:p-2 2xl:p-7 3xl:p-9 rounded-2xl md:rounded-3xl lg:rounded-lg xl:rounded-xl 2xl:rounded-3xl border border-white/20 shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] w-[240px] md:w-[280px] lg:w-[210px] xl:w-[230px] 2xl:w-[420px] 3xl:w-[460px] order-2 lg:order-1 self-center">
    <h3 class="text-white font-bold text-sm lg:text-xs xl:text-xs 2xl:text-xl 3xl:text-3xl mb-3 lg:mb-1 xl:mb-2 2xl:mb-6 3xl:mb-8 text-center tracking-wide">CONTROL DE GIROS</h3>
    
    <div class="space-y-2 md:space-y-3 lg:space-y-1 xl:space-y-2 2xl:space-y-3 3xl:space-y-4">
      <div>
        <p class="text-white/80 text-xs lg:text-xs xl:text-xs 2xl:text-base 3xl:text-lg mb-2 lg:mb-1 xl:mb-1 2xl:mb-4 3xl:mb-5 text-center">Cantidad de giros:</p>
        <div class="flex justify-center gap-1 lg:gap-1 xl:gap-1 2xl:gap-3 3xl:gap-4 mb-3 lg:mb-1 xl:mb-2 2xl:mb-5 3xl:mb-7">
          <button class="spin-selector bg-white/10 hover:bg-white/20 border border-white/30 rounded-md md:rounded-lg lg:rounded-md xl:rounded-md 2xl:rounded-lg py-1 px-1 md:py-2 md:px-2 lg:py-1 lg:px-2 xl:py-1 xl:px-2 2xl:py-3 2xl:px-4 3xl:py-4 3xl:px-5 text-white font-medium transition-all duration-300 hover:scale-105 text-xs md:text-sm lg:text-xs xl:text-xs 2xl:text-lg 3xl:text-xl" data-spin="1">1</button>
          <button class="spin-selector bg-white/10 hover:bg-white/20 border border-white/30 rounded-md md:rounded-lg lg:rounded-md xl:rounded-md 2xl:rounded-lg py-1 px-1 md:py-2 md:px-2 lg:py-1 lg:px-2 xl:py-1 xl:px-2 2xl:py-3 2xl:px-4 3xl:py-4 3xl:px-5 text-white font-medium transition-all duration-300 hover:scale-105 text-xs md:text-sm lg:text-xs xl:text-xs 2xl:text-lg 3xl:text-xl" data-spin="2">2</button>
          <button class="spin-selector bg-blue-500/30 hover:bg-blue-500/40 border border-blue-400/50 rounded-md md:rounded-lg lg:rounded-md xl:rounded-md 2xl:rounded-lg py-1 px-1 md:py-2 md:px-2 lg:py-1 lg:px-2 xl:py-1 xl:px-2 2xl:py-3 2xl:px-4 3xl:py-4 3xl:px-5 text-white font-medium transition-all duration-300 hover:scale-105 selected text-xs md:text-sm lg:text-xs xl:text-xs 2xl:text-lg 3xl:text-xl" data-spin="3">3</button>
          <button class="spin-selector bg-white/10 hover:bg-white/20 border border-white/30 rounded-md md:rounded-lg lg:rounded-md xl:rounded-md 2xl:rounded-lg py-1 px-1 md:py-2 md:px-2 lg:py-1 lg:px-2 xl:py-1 xl:px-2 2xl:py-3 2xl:px-4 3xl:py-4 3xl:px-5 text-white font-medium transition-all duration-300 hover:scale-105 text-xs md:text-sm lg:text-xs xl:text-xs 2xl:text-lg 3xl:text-xl" data-spin="4">4</button>
          <button class="spin-selector bg-white/10 hover:bg-white/20 border border-white/30 rounded-md md:rounded-lg lg:rounded-md xl:rounded-md 2xl:rounded-lg py-1 px-1 md:py-2 md:px-2 lg:py-1 lg:px-2 xl:py-1 xl:px-2 2xl:py-3 2xl:px-4 3xl:py-4 3xl:px-5 text-white font-medium transition-all duration-300 hover:scale-105 text-xs md:text-sm lg:text-xs xl:text-xs 2xl:text-lg 3xl:text-xl" data-spin="5">5</button>
        </div>
      </div>
      
      <div class="bg-white/5 rounded-lg md:rounded-xl lg:rounded-md xl:rounded-lg 2xl:rounded-xl p-2 md:p-3 lg:px-2 lg:py-6 xl:px-2 xl:py-6 2xl:p-3 3xl:p-4 border border-white/20">
        <p class="text-white/70 text-xs lg:text-xs xl:text-xs 2xl:text-sm 3xl:text-base mb-1 lg:mb-0 xl:mb-0 3xl:mb-3 text-center">Giros actuales:</p>
        <div class="text-2xl lg:text-base xl:text-lg 2xl:text-5xl 3xl:text-6xl font-bold text-yellow-400 text-center mb-3 lg:mb-0 xl:mb-0 2xl:mb-5 3xl:mb-7 text-shadow-lg" id="spinCount">0</div>
      </div>
      
      <div class="bg-white/5 rounded-lg md:rounded-xl lg:rounded-md xl:rounded-lg 2xl:rounded-xl p-2 md:p-3 lg:px-2 lg:py-4 xl:px-2 xl:py-4 2xl:p-3 3xl:p-4 border border-white/20">
        <p class="text-white/70 text-xs lg:text-xs xl:text-xs 2xl:text-sm 3xl:text-base mb-1 lg:mb-0 xl:mb-0 3xl:mb-3 text-center"> El ganador se muestra en el:</p>
        <div class="text-xl lg:text-sm xl:text-base 2xl:text-4xl 3xl:text-5xl font-bold text-red-400 text-center text-shadow-lg" id="nextDiscard">Giro 3</div>
      </div>
    </div>
  </div>
  
  <!-- Options Panel -->
  <div class="backdrop-blur-[25px] bg-white/5 p-3 md:p-4 lg:p-2 xl:p-3 2xl:p-7 3xl:p-9 rounded-2xl lg:rounded-3xl border border-white/20 shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] w-full max-w-[240px] md:max-w-[280px] lg:max-w-[280px] xl:max-w-[320px] 2xl:max-w-[420px] 3xl:max-w-[640px] lg:w-[280px] xl:w-[320px] 2xl:w-[420px] 3xl:w-[640px] self-center mt-0 lg:mt-[-40px] xl:mt-[-50px] 2xl:mt-[-120px] 3xl:mt-[-160px] order-3">
    <h3 class="text-white/90 font-semibold text-sm md:text-base lg:text-xs xl:text-sm 2xl:text-3xl 3xl:text-4xl mb-2 md:mb-3 lg:mb-1 xl:mb-2 2xl:mb-4 3xl:mb-6 text-center tracking-wide"> OPCIONES</h3>
    <p class="text-white/60 text-xs lg:text-xs xl:text-xs 2xl:text-base 3xl:text-lg mb-2 lg:mb-1 xl:mb-2 2xl:mb-3 3xl:mb-4 text-center italic">‚úèÔ∏è Haz clic en cualquier opci√≥n para editarla:</p>
    
    <!-- Options List -->
    <div id="optionsList" class="space-y-1 lg:space-y-1 xl:space-y-1 2xl:space-y-3 3xl:space-y-3 max-h-48 lg:max-h-32 xl:max-h-36 2xl:max-h-60 3xl:max-h-64 overflow-y-auto scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
      <!-- Dynamic options will be inserted here -->
    </div>
    
    <!-- Add Option -->
    <div class="space-y-2 md:space-y-3 lg:space-y-1 xl:space-y-2 2xl:space-y-2 3xl:space-y-3">
      <input 
        type="text" 
        id="newOption" 
        placeholder="Nueva opci√≥n..." 
        class="w-full px-2 py-1 md:px-3 md:py-2 lg:px-2 lg:py-1 xl:px-3 xl:py-1 2xl:px-4 2xl:py-3 3xl:px-4 3xl:py-3 backdrop-blur-[15px] bg-white/10 border border-white/30 rounded-lg xl:rounded-xl text-white placeholder-white/60 focus:outline-none focus:border-white/50 focus:bg-white/15 transition-all duration-300 text-xs md:text-sm lg:text-xs xl:text-sm 2xl:text-lg 3xl:text-base"
        maxlength="20"
      />
      <button 
        id="addOption" 
        class="w-full bg-gradient-to-br from-yellow-400 to-orange-500 hover:from-yellow-300 hover:to-orange-400 text-black font-bold px-2 py-1 md:px-3 md:py-2 lg:px-2 lg:py-1 xl:px-3 xl:py-1 2xl:px-4 2xl:py-3 3xl:px-4 3xl:py-3 rounded-lg xl:rounded-xl border-2 border-yellow-300/50 hover:border-yellow-200 transition-all duration-200 hover:scale-105 shadow-lg text-xs md:text-sm lg:text-xs xl:text-sm 2xl:text-lg 3xl:text-base"
      >
        ‚ûï Agregar
      </button>
      <button 
        id="resetOptions" 
        class="w-full backdrop-blur-[15px] bg-red-500/20 hover:bg-red-500/30 px-2 py-1 md:px-3 md:py-2 lg:px-2 lg:py-1 xl:px-3 xl:py-1 2xl:px-4 2xl:py-3 3xl:px-4 3xl:py-3 rounded-lg xl:rounded-xl text-white font-medium border border-white/30 transition-all duration-300 hover:scale-105 text-xs md:text-sm lg:text-xs xl:text-sm 2xl:text-lg 3xl:text-base"
      >
        üîÑ Resetear
      </button>
    </div>
  </div>
</div>

<script>
  const wheel = document.getElementById('wheel') as HTMLElement;
  const spinButton = document.getElementById('spinButton') as HTMLButtonElement;
  const resultModal = document.getElementById('resultModal') as HTMLElement;
  const resultText = document.getElementById('resultText') as HTMLElement;
  const closeModal = document.getElementById('closeModal') as HTMLButtonElement;
  const segments = document.getElementById('segments') as HTMLElement;
  const optionsList = document.getElementById('optionsList') as HTMLElement;
  const newOptionInput = document.getElementById('newOption') as HTMLInputElement;
  const addOptionButton = document.getElementById('addOption') as HTMLButtonElement;
  const resetOptionsButton = document.getElementById('resetOptions') as HTMLButtonElement;
  
  let options = [
    'Opci√≥n 1', 'Opci√≥n 2', 'Opci√≥n 3', 'Opci√≥n 4',
    'Opci√≥n 5', 'Opci√≥n 6', 'Opci√≥n 7', 'Opci√≥n 8'
  ];
  
  const colors = [
    '#00D4FF', '#FF6B35', '#32CD32', '#8B5CF6',
    '#FFD700', '#FF1493', '#DC2626', '#6B7280'
  ];
  
  let isSpinning = false;
  let currentRotation = 0;
  let currentSpinCount = 0;
  let selectedWinningSpinNumber = 3;
  
  function createConfetti() {
    const confettiContainer = document.createElement('div');
    confettiContainer.style.position = 'fixed';
    confettiContainer.style.top = '0';
    confettiContainer.style.left = '0';
    confettiContainer.style.width = '100%';
    confettiContainer.style.height = '100%';
    confettiContainer.style.pointerEvents = 'none';
    confettiContainer.style.zIndex = '10000';
    document.body.appendChild(confettiContainer);
    
    const confettiColors = ['#FFD700', '#FF6B35', '#00D4FF', '#32CD32', '#8B5CF6', '#FF1493'];
    
    for (let i = 0; i < 100; i++) {
      const confetti = document.createElement('div');
      confetti.style.position = 'absolute';
      confetti.style.width = '10px';
      confetti.style.height = '10px';
      confetti.style.backgroundColor = confettiColors[Math.floor(Math.random() * confettiColors.length)];
      confetti.style.left = Math.random() * 100 + '%';
      confetti.style.top = '-10px';
      confetti.style.borderRadius = '50%';
      confetti.style.animation = `confettiFall ${2 + Math.random() * 3}s linear forwards`;
      confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
      confettiContainer.appendChild(confetti);
    }
    
    // Remove confetti after animation
    setTimeout(() => {
      document.body.removeChild(confettiContainer);
    }, 5000);
  }
  
  function createSegments() {
    if (!segments) return;
    segments.innerHTML = '';
    
    const segmentAngle = 360 / options.length;
    
    options.forEach((option, index) => {
      const segment = document.createElement('div');
      segment.className = 'absolute w-full h-full';
      segment.style.zIndex = '10';
      
      const startAngle = index * segmentAngle;
      const endAngle = (index + 1) * segmentAngle;
      const midAngle = (startAngle + endAngle) / 2;
      
      // Crear clip-path con bordes circulares redondeados
      const segmentRadius = 48.5; // Menor que 50 para crear espacio visible entre segmentos
      
      // Calculamos puntos para crear un arco en lugar de l√≠neas rectas
      const startX = 50 + segmentRadius * Math.cos((startAngle - 90) * Math.PI / 180);
      const startY = 50 + segmentRadius * Math.sin((startAngle - 90) * Math.PI / 180);
      const endX = 50 + segmentRadius * Math.cos((endAngle - 90) * Math.PI / 180);
      const endY = 50 + segmentRadius * Math.sin((endAngle - 90) * Math.PI / 180);
      
      // Crear un clip-path con muchos m√°s puntos para una curva perfectamente suave
      const numPoints = 20; // Muchos m√°s puntos para una curva ultra suave
      let clipPathPoints = `50% 50%, `; // Punto central
      
      // Generar puntos a lo largo del arco para crear una curva perfecta
      for (let i = 0; i <= numPoints; i++) {
        const angle = startAngle + (i * (endAngle - startAngle) / numPoints);
        const x = 50 + segmentRadius * Math.cos((angle - 90) * Math.PI / 180);
        const y = 50 + segmentRadius * Math.sin((angle - 90) * Math.PI / 180);
        clipPathPoints += `${x}% ${y}%`;
        if (i < numPoints) clipPathPoints += ', ';
      }
      
      segment.style.clipPath = `polygon(${clipPathPoints})`;
      
      // Contenido del segmento con color
      const segmentContent = document.createElement('div');
      segmentContent.className = 'w-full h-full relative';
      
      const baseColor = colors[index % colors.length];
      const r = parseInt(baseColor.slice(1, 3), 16);
      const g = parseInt(baseColor.slice(3, 5), 16);
      const b = parseInt(baseColor.slice(5, 7), 16);
      const rgbaColor = `rgba(${r}, ${g}, ${b}, 0.8)`;
      
      segmentContent.style.backgroundColor = rgbaColor;
      segmentContent.style.border = '1px solid rgba(255, 255, 255, 0.2)';
      
      // Texto del segmento - posicionamiento radial siguiendo la curvatura
      const textElement = document.createElement('div');
      textElement.style.position = 'absolute';
      textElement.style.top = '50%';
      textElement.style.left = '50%';
      textElement.style.transformOrigin = '0 0';
      textElement.style.zIndex = '50';
      textElement.style.pointerEvents = 'none';
      
      // Calcular la posici√≥n para que el texto est√© centrado en el segmento
      // Ajustar el radio basado en el tama√±o de la ruleta
      const wheelSize = window.innerWidth < 640 ? 280 : 
                       (window.innerWidth < 768 ? 350 : 
                       (window.innerWidth < 1024 ? 400 : 
                       (window.innerWidth < 1280 ? 320 : 
                       (window.innerWidth < 1536 ? 350 : 
                       (window.innerWidth < 1920 ? 800 : 900)))));;;
      const textRadius = wheelSize >= 800 ? wheelSize * 0.25 : wheelSize * 0.31; // 25% para pantallas grandes (2xl+), 31% para otras
      const textAngle = midAngle - 90; // Ajustar para que 0¬∞ sea arriba
      const textX = textRadius * Math.cos(textAngle * Math.PI / 180);
      const textY = textRadius * Math.sin(textAngle * Math.PI / 180);
      
      // Rotar el texto para que siga la tangente del arco pero siempre inicie desde el centro
      const textRotation = midAngle - 90; // -90 para que inicie desde el centro hacia afuera
      
      textElement.style.transform = `translate(${textX}px, ${textY}px) rotate(${textRotation}deg)`;
      
      const textSpan = document.createElement('span');
      textSpan.textContent = option;
      textSpan.style.color = '#FFFFFF';
      // Tama√±o de texto responsivo basado en el tama√±o de la ruleta
      const fontSize = wheelSize < 300 ? '10px' : 
                      (wheelSize < 380 ? '12px' : 
                      (wheelSize < 450 ? '14px' : 
                      (wheelSize < 580 ? '18px' : 
                      (wheelSize < 680 ? '22px' : 
                      (wheelSize < 800 ? '26px' : 
                      (wheelSize < 900 ? '30px' : '34px'))))));
      textSpan.style.fontSize = fontSize;
      textSpan.style.fontWeight = 'bold';
      textSpan.style.textAlign = 'center';
      textSpan.style.textShadow = '3px 3px 8px rgba(0,0,0,0.9), 0 0 12px rgba(0,0,0,0.8), 2px 2px 0px rgba(0,0,0,1)';
      textSpan.style.whiteSpace = 'nowrap';
      textSpan.style.display = 'inline-block';
      textSpan.style.letterSpacing = '1px';
      textSpan.style.transform = 'translateX(-50%) translateY(-50%)'; // Centrar horizontal y verticalmente
      
      textElement.appendChild(textSpan);
      segmentContent.appendChild(textElement);
      segment.appendChild(segmentContent);
      segments.appendChild(segment);
    });
  }
  
  function updateOptionsList() {
    if (!optionsList) return;
    optionsList.innerHTML = '';
    
    options.forEach((option, index) => {
      const optionItem = document.createElement('div');
      optionItem.className = 'flex items-center justify-between p-1 lg:p-1 xl:p-2 2xl:p-2 3xl:p-3 backdrop-blur-[15px] bg-white/10 rounded-lg lg:rounded-lg xl:rounded-xl border border-white/20 hover:bg-white/15 hover:border-white/40 transition-all duration-300 group cursor-pointer';
      
      const optionInput = document.createElement('input');
      optionInput.type = 'text';
      optionInput.value = option;
      optionInput.className = 'bg-transparent text-white/90 font-medium outline-none border-none flex-1 mr-2 lg:mr-2 xl:mr-3 3xl:mr-4 focus:text-white text-xs lg:text-xs xl:text-sm 2xl:text-lg 3xl:text-base cursor-text hover:text-white transition-colors duration-200 placeholder-shown:text-white/70';
      optionInput.maxLength = 20;
      
      // Update option in real-time while typing
      optionInput.addEventListener('input', () => {
        const newValue = optionInput.value.trim();
        if (newValue) {
          options[index] = newValue;
          createSegments();
        }
      });
      
      // Handle blur to restore original if empty
      optionInput.addEventListener('blur', () => {
        const newValue = optionInput.value.trim();
        if (!newValue) {
          optionInput.value = option; // Restore original if empty
          options[index] = option;
          createSegments();
        }
      });
      
      // Handle Enter key
      optionInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          optionInput.blur();
        }
      });
      
      const removeButton = document.createElement('button');
      removeButton.className = 'text-red-400 hover:text-red-300 font-bold text-sm lg:text-sm xl:text-base 2xl:text-lg 3xl:text-lg hover:scale-110 transition-all duration-200 cursor-pointer opacity-100 w-4 h-4 lg:w-4 lg:h-4 xl:w-5 xl:h-5 2xl:w-6 2xl:h-6 3xl:w-7 3xl:h-7 flex items-center justify-center rounded-full hover:bg-red-500/20';
      removeButton.innerHTML = '√ó';
      removeButton.onclick = () => removeOption(index);
      
      optionItem.appendChild(optionInput);
      optionItem.appendChild(removeButton);
      optionsList.appendChild(optionItem);
    });
  }
  
  function addOption() {
    if (!newOptionInput) return;
    const newOption = newOptionInput.value.trim();
    if (newOption && options.length < 12) {
      options.push(newOption);
      newOptionInput.value = '';
      createSegments();
      updateOptionsList();
    }
  }
  
  function removeOption(index: number) {
    if (options.length > 2) {
      options.splice(index, 1);
      createSegments();
      updateOptionsList();
    }
  }
  
  function resetOptions() {
    options = [
      'Opci√≥n 1', 'Opci√≥n 2', 'Opci√≥n 3', 'Opci√≥n 4',
      'Opci√≥n 5', 'Opci√≥n 6', 'Opci√≥n 7', 'Opci√≥n 8'
    ];
    createSegments();
    updateOptionsList();
  }
  
  // Event listeners
  spinButton?.addEventListener('click', () => {
    if (isSpinning || options.length < 2) return;
    
    isSpinning = true;
    spinButton.disabled = true;
    spinButton.textContent = 'üîÑ GIRANDO...';
    
    const minRotation = 1080;
    const maxRotation = 2160;
    const additionalRotation = Math.random() * (maxRotation - minRotation) + minRotation;
    const newRotation = currentRotation + additionalRotation;
    
    if (wheel) {
      wheel.style.transition = 'none';
      wheel.style.transform = `rotate(${currentRotation}deg)`;
      
      // Force reflow
      wheel.offsetHeight;
      
      wheel.style.transition = 'transform 3s cubic-bezier(0.23, 1, 0.320, 1)';
      wheel.style.transform = `rotate(${newRotation}deg)`;
    }
    
    currentRotation = newRotation;
    const normalizedRotation = newRotation % 360;
    const segmentAngle = 360 / options.length;
    // La ruleta gira en sentido horario, pero necesitamos invertir para obtener el √≠ndice correcto
    // La flecha est√° fija en la parte superior, calculamos qu√© segmento pasa por debajo
    const invertedRotation = (360 - normalizedRotation) % 360;
    const selectedIndex = Math.floor(invertedRotation / segmentAngle) % options.length;
    
    // Increment spin count
    currentSpinCount++;
    const currentSpinCountEl = document.getElementById('currentSpinCount');
    if (currentSpinCountEl) {
      currentSpinCountEl.textContent = currentSpinCount.toString();
    }
    
    setTimeout(() => {
      const selectedOption = options[selectedIndex];
      
      // Check if this is the winning spin
      const isWinningSpin = currentSpinCount === selectedWinningSpinNumber;
      
      if (isWinningSpin) {
        // Show modal with result only on winning spin
        if (resultText) {
          resultText.textContent = selectedOption;
        }
        
        if (resultModal) {
        resultModal.style.opacity = '1';
        resultModal.style.pointerEvents = 'auto';
        const modalContent = resultModal.querySelector('div > div') as HTMLElement;
        if (modalContent) {
          modalContent.style.transform = 'scale(1)';
        }
      }
      
        // Trigger confetti animation only on winning spin
        createConfetti();
        
        // Reset spin count after showing winner to start new round
        currentSpinCount = 0;
        const currentSpinCountEl = document.getElementById('currentSpinCount');
        if (currentSpinCountEl) {
          currentSpinCountEl.textContent = '0';
        }
      }
      
      isSpinning = false;
      spinButton.disabled = false;
      spinButton.textContent = 'üéÆ ¬°GIRAR RULETA! üéÆ';
    }, 3000);
  });
  
  // Spin selector buttons functionality
  const spinSelectors = document.querySelectorAll('.spin-selector') as NodeListOf<HTMLButtonElement>;
  const selectedSpinNumberEl = document.getElementById('selectedSpinNumber') as HTMLElement;
  
  spinSelectors.forEach(button => {
    button.addEventListener('click', () => {
      // Remove selected class from all buttons
      spinSelectors.forEach(btn => {
        btn.classList.remove('selected', 'bg-blue-500/30', 'border-blue-400/50');
        btn.classList.add('bg-white/10', 'border-white/30');
      });
      
      // Add selected class to clicked button
      button.classList.add('selected', 'bg-blue-500/30', 'border-blue-400/50');
      button.classList.remove('bg-white/10', 'border-white/30');
      
      // Update selected winning spin number
      selectedWinningSpinNumber = parseInt(button.dataset.spin || '3');
      if (selectedSpinNumberEl) {
        selectedSpinNumberEl.textContent = `Giro ${selectedWinningSpinNumber}`;
      }
      
      // Reset spin count when changing the winning spin number
      currentSpinCount = 0;
      const currentSpinCountEl = document.getElementById('currentSpinCount');
      if (currentSpinCountEl) {
        currentSpinCountEl.textContent = '0';
      }
    });
  });

  addOptionButton?.addEventListener('click', addOption);
  resetOptionsButton?.addEventListener('click', resetOptions);
  
  newOptionInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      addOption();
    }
  });
  
  // Close modal event listener
  closeModal?.addEventListener('click', () => {
    if (resultModal) {
      resultModal.style.opacity = '0';
      resultModal.style.pointerEvents = 'none';
      const modalContent = resultModal.querySelector('div > div') as HTMLElement;
      if (modalContent) {
        modalContent.style.transform = 'scale(0.75)';
      }
    }
  });
  
  // Initialize
  createSegments();
  updateOptionsList();
</script>

<style>
  #wheel {
    transition: transform 3s cubic-bezier(0.23, 1, 0.320, 1);
  }
  
  button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none !important;
  }
  
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  #result {
    animation: pulse 2s infinite;
  }
  
  @keyframes confettiFall {
    0% {
      transform: translateY(-10px) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(100vh) rotate(720deg);
      opacity: 0;
    }
  }
</style>
