---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>Tienda Fortnite - API Test</title>
    <meta name="description" content="Prueba de la API de Fortnite para mostrar la tienda del d√≠a" />
  </head>
  <body class="min-h-screen bg-gradient-to-br from-fortnite-dark via-fortnite-darker to-fortnite-dark flex flex-col">
    <Header />
    <main class="flex-1 pt-0 p-8">
      <div class="max-w-7xl mx-auto">
        <!-- Loading State -->
        <div id="loading" class="text-center py-20">
          <div class="inline-block animate-spin rounded-full h-16 w-16 border-b-2 border-fortnite-yellow"></div>
          <p class="text-white mt-4 text-xl">Cargando tienda de Fortnite...</p>
        </div>

        <!-- Error State -->
        <div id="error" class="hidden text-center py-20">
          <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
          <p class="text-white text-xl">Error al cargar la tienda</p>
          <button id="retryBtn" class="mt-4 bg-fortnite-yellow text-black px-6 py-2 rounded-lg font-bold hover:bg-yellow-400 transition-colors">
            Reintentar
          </button>
        </div>

        <!-- Shop Content -->
        <div id="shopContent" class="hidden">
          <!-- Shop Header -->
          <div class="text-center mb-12">
            <h1 class="text-5xl font-bold text-white mb-4">
              üõí <span class="bg-gradient-to-r from-fortnite-yellow to-orange-400 bg-clip-text text-transparent">TIENDA FORTNITE</span>
            </h1>
            <p class="text-gray-300 text-xl">Elementos disponibles hoy</p>
            <div id="lastUpdate" class="text-gray-400 mt-2"></div>
          </div>

          <!-- Featured Items -->
          <div class="mb-12">
            <h2 class="text-3xl font-bold text-white mb-6 flex items-center">
              ‚≠ê <span class="ml-2">Elementos Destacados</span>
            </h2>
            <div id="featuredItems" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              <!-- Featured items will be inserted here -->
            </div>
          </div>

          <!-- Daily Items -->
          <div>
            <h2 class="text-3xl font-bold text-white mb-6 flex items-center">
              üìÖ <span class="ml-2">Elementos Diarios</span>
            </h2>
            <div id="dailyItems" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
              <!-- Daily items will be inserted here -->
            </div>
          </div>
        </div>
      </div>
    </main>
    <Footer />
  </body>
</html>

<style is:global>
  .item-card {
    @apply backdrop-blur-[25px] bg-white/10 rounded-2xl border border-white/20 overflow-hidden hover:bg-white/15 transition-all duration-300 hover:scale-105;
  }
  
  .rarity-common { @apply border-gray-400; }
  .rarity-uncommon { @apply border-green-400; }
  .rarity-rare { @apply border-blue-400; }
  .rarity-epic { @apply border-purple-400; }
  .rarity-legendary { @apply border-orange-400; }
  .rarity-mythic { @apply border-yellow-400; }
  .rarity-exotic { @apply border-cyan-400; }
  .rarity-transcendent { @apply border-red-400; }
</style>

<script>
  const API_BASE = 'https://fortniteapi.io/v1';
  
  function getMockShopData() {
    return {
      shop: {
        featured: [
          {
            name: "Skin Legendaria Galaxia",
            displayName: "Skin Legendaria Galaxia",
            rarity: { value: "legendary", displayValue: "Legendaria" },
            vbucks: 2000,
            description: "Una skin √©pica del espacio exterior",
            full_background: "https://fortnite-api.com/images/cosmetics/br/cid_029_athena_commando_f_halloween/featured.png"
          },
          {
            name: "Pico C√≥smico",
            displayName: "Pico C√≥smico", 
            rarity: { value: "epic", displayValue: "√âpica" },
            vbucks: 1200,
            description: "Herramienta de las estrellas",
            full_background: "https://fortnite-api.com/images/cosmetics/br/pickaxe_id_027_halloween1/featured.png"
          },
          {
            name: "Baile Gal√°ctico",
            displayName: "Baile Gal√°ctico",
            rarity: { value: "rare", displayValue: "Rara" },
            vbucks: 800,
            description: "Mu√©vete como las estrellas",
            full_background: "https://fortnite-api.com/images/cosmetics/br/eid_floss/featured.png"
          }
        ],
        daily: [
          {
            name: "Skin B√°sica Soldado",
            displayName: "Skin B√°sica Soldado",
            rarity: { value: "uncommon", displayValue: "Poco com√∫n" },
            vbucks: 800,
            description: "Outfit militar cl√°sico",
            full_background: "https://fortnite-api.com/images/cosmetics/br/cid_001_athena_commando_f_default/featured.png"
          },
          {
            name: "Pico de Madera",
            displayName: "Pico de Madera",
            rarity: { value: "common", displayValue: "Com√∫n" },
            vbucks: 500,
            description: "Herramienta b√°sica de recolecci√≥n",
            full_background: "https://fortnite-api.com/images/cosmetics/br/pickaxe_id_001_defaultpickaxe/featured.png"
          },
          {
            name: "Emotic√≥n Sonrisa",
            displayName: "Emotic√≥n Sonrisa",
            rarity: { value: "uncommon", displayValue: "Poco com√∫n" },
            vbucks: 200,
            description: "Expresa tu alegr√≠a",
            full_background: "https://fortnite-api.com/images/cosmetics/br/emoji_s01_happy/featured.png"
          },
          {
            name: "Planeador B√°sico",
            displayName: "Planeador B√°sico",
            rarity: { value: "common", displayValue: "Com√∫n" },
            vbucks: 500,
            description: "Planeador est√°ndar",
            full_background: "https://fortnite-api.com/images/cosmetics/br/glider_id_001_default/featured.png"
          },
          {
            name: "Mochila T√°ctica",
            displayName: "Mochila T√°ctica",
            rarity: { value: "rare", displayValue: "Rara" },
            vbucks: 1200,
            description: "Almacenamiento militar",
            full_background: "https://fortnite-api.com/images/cosmetics/br/bid_001_blackknight/featured.png"
          }
        ]
      },
      date: new Date().toISOString()
    };
  }

  async function fetchShopData() {
    try {
      console.log('Fetching shop data from:', `${API_BASE}/shop?lang=es`);
      const response = await fetch(`${API_BASE}/shop?lang=es`);
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        console.log('API failed, using mock data');
        return getMockShopData();
      }
      
      const data = await response.json();
      console.log('Shop data received:', data);
      return data;
    } catch (error) {
      console.error('Error fetching shop, using mock data:', error);
      return getMockShopData();
    }
  }

  function getRarityClass(rarity) {
    const rarityMap = {
      'common': 'rarity-common',
      'uncommon': 'rarity-uncommon', 
      'rare': 'rarity-rare',
      'epic': 'rarity-epic',
      'legendary': 'rarity-legendary',
      'mythic': 'rarity-mythic',
      'exotic': 'rarity-exotic',
      'transcendent': 'rarity-transcendent'
    };
    return rarityMap[rarity?.toLowerCase()] || 'rarity-common';
  }

  function createItemCard(item, isDaily = false) {
    const rarityClass = getRarityClass(item.rarity?.value || item.rarity?.id);
    const cardSize = isDaily ? 'h-64' : 'h-80';
    const itemName = item.name || item.displayName || 'Item sin nombre';
    const itemImage = item.displayAssets?.[0]?.full_background || 
                     item.images?.featured || 
                     item.images?.icon || 
                     item.full_background ||
                     item.icon ||
                     '/placeholder.png';
    const itemPrice = item.price?.finalPrice || item.vbucks || item.cost || 0;
    const itemRarity = item.rarity?.displayValue || item.rarity?.name || item.rarity?.id || '';
    const itemDescription = item.description || item.type?.displayValue || item.type?.name || '';
    
    return `
      <div class="item-card ${rarityClass} ${cardSize}">
        <div class="relative h-3/4">
          <img 
            src="${itemImage}" 
            alt="${itemName}"
            class="w-full h-full object-cover"
            loading="lazy"
            onerror="this.src='/placeholder.png'"
          />
          <div class="absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-sm font-bold">
            ${itemPrice} V-Bucks
          </div>
          ${itemRarity ? `
            <div class="absolute top-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
              ${itemRarity}
            </div>
          ` : ''}
        </div>
        <div class="p-3 h-1/4 flex flex-col justify-between">
          <h3 class="text-white font-bold text-sm truncate">${itemName}</h3>
          <p class="text-gray-300 text-xs">${itemDescription}</p>
        </div>
      </div>
    `;
  }

  async function loadShop() {
    const loadingEl = document.getElementById('loading');
    const errorEl = document.getElementById('error');
    const shopContentEl = document.getElementById('shopContent');
    const featuredItemsEl = document.getElementById('featuredItems');
    const dailyItemsEl = document.getElementById('dailyItems');
    const lastUpdateEl = document.getElementById('lastUpdate');

    if (!loadingEl || !errorEl || !shopContentEl || !featuredItemsEl || !dailyItemsEl || !lastUpdateEl) {
      console.error('Required DOM elements not found');
      return;
    }

    try {
      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      shopContentEl.classList.add('hidden');

      const data = await fetchShopData();
      
      if (!data.data) throw new Error('No shop data available');

      const shop = data.data;
      
      // Update last update time
      if (shop.date) {
        const date = new Date(shop.date);
        lastUpdateEl.textContent = `√öltima actualizaci√≥n: ${date.toLocaleString('es-ES')}`;
      }

      // Clear previous content
      featuredItemsEl.innerHTML = '';
      dailyItemsEl.innerHTML = '';

      // Debug: Log shop structure
      console.log('Shop structure:', shop);
      console.log('All shop keys:', Object.keys(shop));
      
      // FortniteAPI.io structure - check for shop property
      let featuredItems: any[] = [];
      let dailyItems: any[] = [];
      
      // Check different possible structures for FortniteAPI.io
      if (shop.shop) {
        console.log('Found shop property:', shop.shop);
        const shopData = shop.shop;
        
        if (shopData.featured) {
          console.log('Found featured items:', shopData.featured.length);
          featuredItems = shopData.featured;
        }
        
        if (shopData.daily) {
          console.log('Found daily items:', shopData.daily.length);
          dailyItems = shopData.daily;
        }
      } else if (shop.featured || shop.daily) {
        // Direct structure
        if (shop.featured) {
          console.log('Found featured items directly:', shop.featured.length);
          featuredItems = shop.featured;
        }
        
        if (shop.daily) {
          console.log('Found daily items directly:', shop.daily.length);
          dailyItems = shop.daily;
        }
      } else if (shop.entries) {
        // Fallback to entries
        console.log('Found entries, splitting into featured/daily:', shop.entries.length);
        const halfPoint = Math.ceil(shop.entries.length / 2);
        featuredItems = shop.entries.slice(0, halfPoint);
        dailyItems = shop.entries.slice(halfPoint);
      }
      
      console.log('Featured items found:', featuredItems.length);
      console.log('Daily items found:', dailyItems.length);
      
      // Process featured items
      if (featuredItems.length > 0) {
        featuredItems.forEach((item, index) => {
          console.log(`Processing featured item ${index}:`, item);
          if (item.name || item.displayName) {
            console.log('Adding featured item:', item.name || item.displayName);
            featuredItemsEl.innerHTML += createItemCard(item, false);
          }
        });
      }
      
      // Process daily items
      if (dailyItems.length > 0) {
        dailyItems.forEach((item, index) => {
          console.log(`Processing daily item ${index}:`, item);
          if (item.name || item.displayName) {
            console.log('Adding daily item:', item.name || item.displayName);
            dailyItemsEl.innerHTML += createItemCard(item, true);
          }
        });
      }

      // If still no items were added, show debug info
      if (featuredItemsEl.innerHTML === '' && dailyItemsEl.innerHTML === '') {
        console.log('No items were processed. Showing debug info.');
        featuredItemsEl.innerHTML = '<p class="text-white">No hay elementos destacados disponibles</p>';
        dailyItemsEl.innerHTML = '<p class="text-white">No hay elementos diarios disponibles</p>';
        
        // Show raw data structure for debugging
        console.log('Raw shop data for debugging:', JSON.stringify(shop, null, 2));
      }

      // Show content
      loadingEl.classList.add('hidden');
      shopContentEl.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading shop:', error);
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
      
      // Show more detailed error in the UI
      const errorMessage = errorEl.querySelector('p');
      if (errorMessage) {
        errorMessage.textContent = `Error: ${error.message || 'No se pudo cargar la tienda'}`;
      }
    }
  }

  // Retry button
  document.getElementById('retryBtn')?.addEventListener('click', loadShop);

  // Load shop on page load
  document.addEventListener('DOMContentLoaded', loadShop);
</script>
